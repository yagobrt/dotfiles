# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set icons for file types
set icons true

# show info about files and folders
set info size
set dircounts

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# drag and drop with dragon
cmd dragon-out &{{
    dragon -x -a $fx
}}

map Do dragon-out

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# File Previews
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# mkdir command. See wiki if you want it to select created dir
map a :push %mkdir<space>

# touch command.
map A :push %touch<space>

# reload current directory
map R :reload

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# deletion commands
# move current file or selected files to trash folder
cmd trash ${{
   set -f
   # If there is more than one file, show number instead of names
   if [ $(echo "$(fx)" | wc -w) -gt 1 ]; then
     printf "move %d files to trash? [y/N] " $(echo "$fx" | wc -w)
   else
     printf "move '$fx' to trash? [y/N] "
   fi
   read ans
   if [ "$ans" = "y" ]; then
     for f in $fx; do
       filename=$(basename -- "$f")
       datetime=$(date +%Y-%m-%dT%H:%M:%S)
       echo "[Trash Info]" > ~/.local/share/Trash/info/$filename.trashinfo
       echo "Path=$f" >> ~/.local/share/Trash/info/$filename.trashinfo
       echo "DeletionDate=$datetime" >> ~/.local/share/Trash/info/$filename.trashinfo
       mv $f ~/.local/share/Trash/files/
     done
   fi
}}
# remove current file or selected files permanently
cmd delete ${{
    if [ $(echo $fx | wc -w) -gt 1 ]; then
      printf "delete %d files? [y/N] " $(echo $fx | wc -w)
    else
      printf "delete '$fx'? [y/N] "
    fi
    set -f
    read ans
    [ "$ans" = "y" ] && rm -fr $fx
}}

# use '<delete>' key for moving files to trash
map <delete> trash
# use '<s-delete>' or DD for permanent deletion
map DD delete 
map <s-delete> delete

# extract the current file with the right command
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# bulkrename
# thx https://github.com/gokcehan/lf/issues/149#issuecomment-470960434
cmd bulk-rename ${{
	index=$(mktemp /tmp/lf-bulk-rename-index.XXXXXXXXXX)
	if [ -n "${fs}" ]; then
		echo "$fs" > $index
	else
		echo "$(ls "$(dirname $f)" | tr ' ' "\n")" > $index
	fi
	index_edit=$(mktemp /tmp/lf-bulk-rename.XXXXXXXXXX)
	cat $index > $index_edit
	$EDITOR $index_edit
	if [ $(cat $index | wc -l) -eq $(cat $index_edit | wc -l) ]; then
		max=$(($(cat $index | wc -l)+1))
		counter=1
		while [ $counter -le $max ]; do
			a="$(cat $index | sed "${counter}q;d")"
			b="$(cat $index_edit | sed "${counter}q;d")"
			counter=$(($counter+1))
			
			[ "$a" = "$b" ] && continue
			[ -e "$b" ] && echo "File exists: $b" && continue
			mv "$a" "$b"
		done
	else
		echo "Number of lines must stay the same"
	fi
	rm $index $index_edit
}}

# Source the shortcuts file
source ~/.config/lf/shortcuts
